from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
import logging
import aiohttp
import time

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

TOKEN = "7886695776:AAFhLbjjLmIZ3qQqJbrFOCzpNBhxoQW1DBQ"

class CalcState(StatesGroup):
    qty_jilka = State()
    line_speed = State()
    weight = State()

# –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
last_message_time = time.time()

async def start_command(message: Message, state: FSMContext):
    global last_message_time
    last_message_time = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª–∫–∏:")
    await state.set_state(CalcState.qty_jilka)

async def process_qty_jilka(message: Message, state: FSMContext):
    global last_message_time
    last_message_time = time.time()
    
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(qty_jilka=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –ª–∏–Ω–∏–∏:")
    await state.set_state(CalcState.line_speed)

async def process_line_speed(message: Message, state: FSMContext):
    global last_message_time
    last_message_time = time.time()
    
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(line_speed=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ç–∞–±–∞—á–Ω–æ–π –ø–∞–ª–æ—á–∫–∏:")
    await state.set_state(CalcState.weight)

async def process_weight(message: Message, state: FSMContext):
    global last_message_time
    last_message_time = time.time()

    try:
        weight = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    qty_jilka = data.get("qty_jilka")
    line_speed = data.get("line_speed")

    if line_speed == 0 or weight == 0:
        await message.answer("–û—à–∏–±–∫–∞: —Å–∫–æ—Ä–æ—Å—Ç—å –ª–∏–Ω–∏–∏ –∏ –≤–µ—Å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏.")
        return

    result = (qty_jilka * 100) / (line_speed * weight) * 1000

    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞: {result:.2f}\n\n–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–Ω–æ–≤–∞? –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    await state.clear()

async def shutdown_check(bot: Bot):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. """
    global last_message_time
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        if time.time() - last_message_time > 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            logging.info("‚è≥ –ë–æ—Ç –∑–∞—Å—ã–ø–∞–µ—Ç...")
            await bot.session.close()
            exit(0)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å (Railway –µ–≥–æ –≤—ã–∫–ª—é—á–∏—Ç)

async def main():
    logging.info("üöÄ –ë–æ—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    connector = aiohttp.TCPConnector()
    bot = Bot(token=TOKEN, connector=connector)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(start_command, Command("start"))
    dp.message.register(process_qty_jilka, CalcState.qty_jilka)
    dp.message.register(process_line_speed, CalcState.line_speed)
    dp.message.register(process_weight, CalcState.weight)

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(shutdown_check(bot))

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
